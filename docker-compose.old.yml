
services:
  nextjs:
    build: ./frontend
    container_name: nextjs
    restart: always
    # Ports defined in override files (dev/prod)
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_CMS_URL=${NEXT_PUBLIC_CMS_URL:-http://cms:4000}
      - NEXT_PUBLIC_N8N_URL=${NEXT_PUBLIC_N8N_URL:-http://n8n:5678}
    depends_on:
      - cms
      - n8n
    networks:
      - sliot-net

  cms:
    build: ./cms
    environment:
      DATABASE_URL: ${CMS_DATABASE_URL:-postgresql://postgres:password@db:5432/sliot_cms}
      PORT: 4000
      NODE_ENV: ${NODE_ENV:-development}
      # Cognito configuration
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID:-}
      AWS_COGNITO_CLIENT_ID: ${AWS_COGNITO_CLIENT_ID:-}
      AWS_REGION: ${AWS_REGION:-eu-north-1}
    ports:
      - "${CMS_PORT:-4000}:4000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sliot-net
    # Run migrations on startup
    command: >
      sh -c "
        echo 'Waiting for database to be ready...'
        npx prisma migrate deploy
        echo 'Database migrations completed'
        npx prisma generate
        echo 'Prisma client generated'
        npm start
      "

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    # Ports defined in override files (dev/prod)
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${N8N_DB_POSTGRESDB_HOST:-db}
      - DB_POSTGRESDB_PORT=${N8N_DB_POSTGRESDB_PORT:-5432}
      - DB_POSTGRESDB_DATABASE=${N8N_DB_POSTGRESDB_DATABASE:-n8n}
      - DB_POSTGRESDB_USER=${N8N_DB_POSTGRESDB_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD:-password}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-password}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - N8N_PATH=${N8N_PATH:-/}
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678/}
    depends_on:
      - db
    networks:
      - sliot-net
    volumes:
      - n8n_data:/home/node/.n8n

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sliot_cms}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sliot-net

networks:
  sliot-net:
    name: sliot-net

volumes:
  n8n_data:
