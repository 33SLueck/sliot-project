version: '3.8'

services:
  nextjs:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    image: ${NEXTJS_IMAGE:-sliot-project/nextjs:latest}
    container_name: nextjs
    restart: always
    ports:
      - "${NEXTJS_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_CMS_URL=${NEXT_PUBLIC_CMS_URL:-http://localhost:4000}
      - NEXT_PUBLIC_N8N_URL=${NEXT_PUBLIC_N8N_URL:-http://localhost:5678}
      # Cognito Auth (only needed in production)
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID:-}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET:-}
      - COGNITO_ISSUER=${COGNITO_ISSUER:-}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-development-secret}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
    depends_on:
      cms:
        condition: service_healthy
    networks:
      - sliot-net

  cms:
    build: 
      context: ./cms
      dockerfile: Dockerfile
    image: ${CMS_IMAGE:-sliot-project/cms:latest}
    container_name: cms
    restart: always
    ports:
      - "${CMS_PORT:-4000}:4000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/sliot_cms}
      - PORT=4000
      - NODE_ENV=${NODE_ENV:-development}
      # Cognito configuration (only needed if using Cognito)
      - AWS_COGNITO_USER_POOL_ID=${AWS_COGNITO_USER_POOL_ID:-}
      - AWS_COGNITO_CLIENT_ID=${AWS_COGNITO_CLIENT_ID:-}
      - AWS_REGION=${AWS_REGION:-eu-north-1}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/categories"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sliot-net

  n8n:
    image: n8nio/n8n:${N8N_VERSION:-latest}
    container_name: n8n
    restart: always
    ports:
      - "${N8N_BIND:-127.0.0.1}:${N8N_PORT:-5678}:5678"
    environment:
      # Database
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DATABASE:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-password}
      
      # Basic Auth
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      
      # Network Configuration
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - N8N_PATH=/
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678/}
      
      # Production-specific settings (only set when needed)
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE:-false}
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-}
      - N8N_EXTERNAL_FRONTEND_HOST=${N8N_EXTERNAL_FRONTEND_HOST:-}
      
      # Disable unnecessary features for cleaner setup
      - N8N_DISABLE_USER_MANAGEMENT=${N8N_DISABLE_USER_MANAGEMENT:-false}
      - N8N_PUBLIC_API_DISABLED=${N8N_PUBLIC_API_DISABLED:-false}
      - N8N_TELEMETRY_ENABLED=${N8N_TELEMETRY_ENABLED:-false}
      - N8N_VERSION_NOTIFICATIONS_ENABLED=${N8N_VERSION_NOTIFICATIONS_ENABLED:-false}
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-false}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - sliot-net

  db:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-mycms}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - sliot-net

networks:
  sliot-net:
    name: sliot-net

volumes:
  n8n_data:
    name: n8n_data
  postgres_data:
    name: postgres_data