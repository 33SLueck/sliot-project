generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Profile (separate from Cognito auth)
model User {
  id          String   @id @default(cuid())
  cognitoId   String   @unique // AWS Cognito User ID
  email       String   @unique
  firstName   String?
  lastName    String?
  displayName String?
  avatar      String?
  bio         String?
  role        UserRole @default(EDITOR)
  isActive    Boolean  @default(true)
  
  // Content relationships
  posts       Post[]
  pages       Page[]
  media       Media[]
  comments    Comment[]
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  @@map("users")
}

// User roles for CMS permissions
enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  CONTRIBUTOR
  VIEWER
}

// Blog posts and articles
model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String?
  featuredImage String?
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Relationships
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  tags        PostTag[]
  comments    Comment[]
  media       PostMedia[]
  
  // Audit fields
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

// Static pages
model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String?
  template    String?    // Template to use for rendering
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Relationships
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  media       PageMedia[]
  
  // Page hierarchy
  parentId    String?
  parent      Page?      @relation("PageHierarchy", fields: [parentId], references: [id])
  children    Page[]     @relation("PageHierarchy")
  
  // Navigation
  showInNav   Boolean    @default(false)
  navOrder    Int?
  
  // Audit fields
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("pages")
}

// Content categories
model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  color       String? // Hex color for UI
  
  // Hierarchy
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Relationships
  posts       Post[]
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("categories")
}

// Tags for content
model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?   // Hex color for UI
  
  // Relationships
  posts     PostTag[]
  
  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("tags")
}

// Many-to-many relationship between posts and tags
model PostTag {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
  
  @@id([postId, tagId])
  @@map("post_tags")
}

// Media files (images, documents, etc.)
model Media {
  id          String     @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  fileSize    Int
  width       Int?
  height      Int?
  url         String     // S3 URL or CDN URL
  altText     String?
  caption     String?
  
  // Upload info
  uploadedBy  User       @relation(fields: [uploadedById], references: [id])
  uploadedById String
  
  // Relationships
  postMedia   PostMedia[]
  pageMedia   PageMedia[]
  
  // Audit fields
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("media")
}

// Many-to-many relationship between posts and media
model PostMedia {
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String
  order   Int?   // For ordered galleries
  
  @@id([postId, mediaId])
  @@map("post_media")
}

// Many-to-many relationship between pages and media
model PageMedia {
  page    Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId  String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String
  order   Int?   // For ordered galleries
  
  @@id([pageId, mediaId])
  @@map("page_media")
}

// Comments system
model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  
  // Author (can be logged in user or guest)
  author    User?         @relation(fields: [authorId], references: [id])
  authorId  String?
  guestName String?       // For non-registered users
  guestEmail String?      // For non-registered users
  
  // Relationships
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  
  // Comment hierarchy (replies)
  parentId  String?
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  
  // Audit fields
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@map("comments")
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  TRASH
}

// Site settings and configuration
model Setting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String?
  type        String   @default("string") // string, number, boolean, json
  description String?
  category    String?  // General, SEO, Social, etc.
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("settings")
}

// Navigation menus
model Menu {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  items       MenuItem[]
  
  // Audit fields
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("menus")
}

// Menu items
model MenuItem {
  id       String  @id @default(cuid())
  label    String
  url      String?
  target   String? // _self, _blank, etc.
  order    Int
  isActive Boolean @default(true)
  
  // Relationships
  menu     Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId   String
  
  // Hierarchy
  parentId String?
  parent   MenuItem? @relation("MenuItemHierarchy", fields: [parentId], references: [id])
  children MenuItem[] @relation("MenuItemHierarchy")
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("menu_items")
}
