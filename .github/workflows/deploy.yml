name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set lowercase repository name
      id: lowercase
      run: echo "repo=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.repo }}/nextjs
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest

    - name: Extract metadata for CMS
      id: meta-cms
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.repo }}/cms
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push CMS image
      uses: docker/build-push-action@v5
      with:
        context: ./cms
        push: true
        tags: ${{ steps.meta-cms.outputs.tags }}
        labels: ${{ steps.meta-cms.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 60s
        command_timeout: 15m
        script: |
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Create project directory if it doesn't exist
          sudo mkdir -p /home/ubuntu/sliot-project
          sudo chown ubuntu:ubuntu /home/ubuntu/sliot-project
          
          # Navigate to project directory
          cd /home/ubuntu/sliot-project
          
          # Clone or update repository
          if [ ! -d ".git" ]; then
            git clone https://github.com/33SLueck/sliot-project.git .
          else
            git pull origin main
          fi
          
          # Install Docker and Docker Compose if not already installed
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            # Restart shell to apply docker group
            sudo systemctl restart docker
          fi
          
          # Create necessary directories
          mkdir -p postgres-data
          
          # Pull latest images
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          
          # Start services
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Show status
          docker compose ps