name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/nextjs
  IMAGE_NAME_CMS: ${{ github.repository }}/cms

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for CMS
      id: meta-cms
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CMS }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

    - name: Build and push CMS image
      uses: docker/build-push-action@v5
      with:
        context: ./cms
        push: true
        tags: ${{ steps.meta-cms.outputs.tags }}
        labels: ${{ steps.meta-cms.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 120s
        command_timeout: 20m
        script: |
          # Navigate to project directory
          cd /home/ec2-user/sliot-project
          
          # Pull latest code
          echo "=== Pulling Latest Code ==="
          git pull origin main
          
          # Ensure Docker is running
          echo "=== Checking Docker Status ==="
          if ! sudo systemctl is-active --quiet docker; then
            echo "Starting Docker service..."
            sudo systemctl start docker
            sleep 5
          fi
          
          # Create necessary directories
          mkdir -p postgres-data
          
          # Stop running containers gracefully
          echo "=== Stopping Current Services ==="
          docker-compose -f docker-compose.yml -f docker-compose.local-build.yml down --remove-orphans || true
          
          # Clean up any dangling containers
          docker container prune -f || true
          
          # Start services (using local-build for now, can switch to prod later)
          echo "=== Starting Services ==="
          if docker-compose -f docker-compose.yml -f docker-compose.local-build.yml up -d --build; then
            echo "✅ Services started successfully!"
          else
            echo "❌ Service startup failed"
            docker-compose -f docker-compose.yml -f docker-compose.local-build.yml logs --tail=20
            exit 1
          fi
          
          # Wait for services to be ready
          echo "=== Waiting for Services ==="
          sleep 45
          
          # Check if database is ready before migrations
          echo "=== Checking Database Connectivity ==="
          for i in {1..10}; do
            if docker-compose -f docker-compose.yml -f docker-compose.local-build.yml exec -T db pg_isready -U postgres; then
              echo "✅ Database is ready"
              break
            fi
            echo "Waiting for database... ($i/10)"
            sleep 10
          done
          
          # Run database migrations with retry
          echo "=== Running Database Migrations ==="
          for i in {1..3}; do
            if docker-compose -f docker-compose.yml -f docker-compose.local-build.yml exec -T cms npx prisma migrate deploy; then
              echo "✅ Database migrations completed successfully"
              break
            else
              echo "❌ Migration attempt $i failed"
              if [ $i -eq 3 ]; then
                echo "❌ Database migrations failed after 3 attempts"
                docker-compose -f docker-compose.yml -f docker-compose.local-build.yml logs cms --tail=20
                exit 1
              fi
              sleep 10
            fi
          done
          
          # Validate deployment with retries
          echo "=== Validating Deployment ==="
          sleep 15
          
          # Test CMS health with retry
          echo "Testing CMS API..."
          for i in {1..5}; do
            if curl -f http://localhost:4000/api/categories > /dev/null 2>&1; then
              echo "✅ CMS API is responding"
              break
            fi
            echo "CMS API check $i/5 failed, retrying..."
            if [ $i -eq 5 ]; then
              echo "❌ CMS API health check failed"
              docker-compose -f docker-compose.yml -f docker-compose.local-build.yml logs cms --tail=20
              exit 1
            fi
            sleep 10
          done
          
          # Test frontend with retry
          echo "Testing Frontend..."
          for i in {1..5}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is responding"
              break
            fi
            echo "Frontend check $i/5 failed, retrying..."
            if [ $i -eq 5 ]; then
              echo "❌ Frontend health check failed"
              docker-compose -f docker-compose.yml -f docker-compose.local-build.yml logs nextjs --tail=20
              exit 1
            fi
            sleep 10
          done
          
          # Clean up old images
          echo "=== Cleanup ==="
          docker image prune -f || echo "Image cleanup completed"
          
          # Final status check
          echo "=== Final Status ==="
          docker-compose -f docker-compose.yml -f docker-compose.local-build.yml ps
          
          echo "=== Deployment Summary ==="
          echo "✅ Production deployment completed successfully at $(date)"
          echo "🌐 Application available at: https://sliot.de"
          echo "🔧 n8n available at: https://n8n.sliot.de"
          echo "🔐 Authentication: AWS Cognito integrated"