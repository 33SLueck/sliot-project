name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/nextjs
  IMAGE_NAME_CMS: ${{ github.repository }}/cms

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for CMS
      id: meta-cms
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CMS }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

    - name: Build and push CMS image
      uses: docker/build-push-action@v5
      with:
        context: ./cms
        push: true
        tags: ${{ steps.meta-cms.outputs.tags }}
        labels: ${{ steps.meta-cms.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: sliot.de
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 60s
        command_timeout: 15m
        script: |
          # Navigate to project directory
          cd /home/ec2-user/sliot-project
          
          # Pull latest code
          git pull origin main
          
          # Install Docker and Docker Compose if not already installed
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sleep 10
          fi
          
          # Create necessary directories
          mkdir -p postgres-data
          
          # Stop running containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans || true
          
          # Pull latest images from registry
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          
          # Start services with production configuration
          echo "Starting services with production configuration..."
          if docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d; then
            echo "✅ Services started successfully!"
          else
            echo "❌ Service startup failed"
            docker-compose logs --tail=20
            exit 1
          fi
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Run database migrations
          echo "=== Running Database Migrations ==="
          if docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec -T cms npx prisma migrate deploy; then
            echo "✅ Database migrations completed successfully"
          else
            echo "❌ Database migrations failed"
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs cms --tail=20
            exit 1
          fi
          
          # Validate deployment
          echo "=== Validating Deployment ==="
          sleep 10
          
          # Test CMS health
          if curl -f http://localhost:4000/api/categories > /dev/null 2>&1; then
            echo "✅ CMS API is responding"
          else
            echo "❌ CMS API health check failed"
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs cms --tail=20
            exit 1
          fi
          
          # Test frontend
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Frontend is responding"
          else
            echo "❌ Frontend health check failed"
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs nextjs --tail=20
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f || echo "Image cleanup completed"
          
          echo "=== Deployment Summary ==="
          echo "✅ Production deployment completed successfully at $(date)"
          echo "🌐 Application available at: https://sliot.de"
          echo "🔧 n8n available at: https://n8n.sliot.de"
          
          # Show final status
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps