name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug connection info
      run: |
        echo "Connecting to: ec2-16-16-134-76.eu-north-1.compute.amazonaws.com"
        echo "Username will be: ${{ secrets.EC2_USERNAME }}"
        echo "Key configured: ${{ secrets.EC2_SSH_KEY != '' }}"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ec2-13-62-17-97.eu-north-1.compute.amazonaws.com
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 60s
        command_timeout: 15m
        debug: true
        script: |
          # Create project directory if it doesn't exist
          sudo mkdir -p /home/ec2-user/sliot-project
          sudo chown ec2-user:ec2-user /home/ec2-user/sliot-project
          
          # Navigate to project directory
          cd /home/ec2-user/sliot-project
          
          # Clone or update repository
          if [ ! -d ".git" ]; then
            git clone https://github.com/33SLueck/sliot-project.git .
          else
            git pull origin main
          fi
          
          # Install Docker and Docker Compose if not already installed
          if ! command -v docker &> /dev/null; then
            # Amazon Linux uses yum package manager
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Wait for docker to be ready
            sleep 10
          fi
          
          # Create necessary directories
          mkdir -p postgres-data
          
          # Check disk space and expand filesystem if needed
          echo "=== Disk Space Check ==="
          df -h
          
          # Expand filesystem to use full disk (in case it hasn't auto-expanded)
          sudo resize2fs /dev/nvme0n1p1 2>/dev/null || sudo resize2fs /dev/xvda1 2>/dev/null || echo "Filesystem already expanded or different device"
          
          echo "=== After filesystem expansion ==="
          df -h
          
          # Clean up any existing containers
          docker-compose -f docker-compose.yml -f docker-compose.local-build.yml down --remove-orphans || true
          
          # Build and start services locally
          echo "Building and starting services locally..."
          if docker-compose -f docker-compose.yml -f docker-compose.local-build.yml up -d --build; then
            echo "Services started successfully!"
          else
            echo "Service startup failed, checking disk space and Docker status..."
            df -h
            docker system df
            docker ps -a
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f || echo "Image cleanup failed but continuing..."
          
          # Show status and logs (with error handling)
          echo "Deployment completed. Checking status..."
          docker-compose ps || echo "Failed to show container status"
          
          # Show logs for debugging (limit output to prevent timeout)
          echo "=== Service Logs ==="
          timeout 30 docker-compose logs --tail=20 || echo "Failed to retrieve logs or timeout reached"
          
          echo "=== Deployment Summary ==="
          echo "Deployment script completed at $(date)"