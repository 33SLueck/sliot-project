services:
  frontend:
    build: ./frontend
    image: ${FRONTEND_IMAGE:-sliot-project-frontend}
    container_name: frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_CMS_URL: ${NEXT_PUBLIC_CMS_URL:-http://localhost:4000}
      NEXT_PUBLIC_N8N_URL: ${NEXT_PUBLIC_N8N_URL:-http://localhost:5678}
      COGNITO_CLIENT_ID: ${COGNITO_CLIENT_ID:-}
      COGNITO_CLIENT_SECRET: ${COGNITO_CLIENT_SECRET:-}
      COGNITO_ISSUER: ${COGNITO_ISSUER:-}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-development-secret}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    depends_on:
      - cms
      - n8n
    networks:
      - sliot-net

  cms:
    build: ./cms
    image: ${CMS_IMAGE:-sliot-project-cms}
    container_name: cms
    restart: unless-stopped
    ports:
      - "${CMS_PORT:-4000}:4000"
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:password@postgres:5432/sliot_cms}
      PORT: 4000
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sliot-net
    command: >
      sh -c "
        echo 'Waiting for database to be ready...'
        npx prisma migrate deploy
        echo 'Database migrations completed'
        npx prisma generate
        echo 'Prisma client generated'
        npm start
      "

  n8n:
    image: n8nio/n8n:1.113.3
    container_name: n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-sliot_cms}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-postgres}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: ${N8N_PORT:-5678}
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-false}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin}
      N8N_DISABLE_USER_MANAGEMENT: ${N8N_DISABLE_USER_MANAGEMENT:-false}
      N8N_SECURE_COOKIE: ${N8N_SECURE_COOKIE:-false}
      WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678/}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sliot-net

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sliot_cms}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sliot-net

volumes:
  postgres_data:
  n8n_data:

networks:
  sliot-net:
    driver: bridge